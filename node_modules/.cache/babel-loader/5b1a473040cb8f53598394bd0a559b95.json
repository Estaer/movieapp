{"ast":null,"code":"var _jsxFileName = \"/Users/essa/WebstormProjects/movieapp/src/pages/discover/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from 'styled-components';\nimport * as colors from \"../../colors\";\nimport { getPopularMovies } from \"../../fetcher\";\nimport SearchFilters from \"../../components/searchfilter\";\nimport MovieList from \"../../components/movielist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ratings = [{\n  id: 7.5,\n  name: 7.5\n}, {\n  id: 8,\n  name: 8\n}, {\n  id: 8.5,\n  name: 8.5\n}, {\n  id: 9,\n  name: 9\n}, {\n  id: 9.5,\n  name: 9.5\n}, {\n  id: 10,\n  name: 10\n}];\nconst languages = [{\n  id: 'GR',\n  name: 'Greek'\n}, {\n  id: 'EN',\n  name: 'English'\n}, {\n  id: 'RU',\n  name: 'Russian'\n}, {\n  id: 'PO',\n  name: 'Polish'\n}];\n\nconst Discover = () => {\n  _s();\n\n  const [keyword, setKeyword] = useState('');\n  const [year, setYear] = useState(0);\n  const [results, setResults] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [genreOptions, setGenreOptions] = useState([]);\n  const [ratingOptions, setRatingOptions] = useState(ratings);\n  const [languageOptions, setLanguageOptions] = useState(languages);\n  useEffect(() => {\n    const initialFetch = async () => {\n      const results = await getPopularMovies();\n      setResults(results);\n    };\n\n    initialFetch();\n  }, []); // TODO: Preload and set the popular movies and movie genres when page loads\n  // TODO: Update search results based on the keyword and year inputs\n\n  return /*#__PURE__*/_jsxDEV(DiscoverWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(MobilePageTitle, {\n      children: \"Discover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(TotalCount, {\n      children: [totalCount, \" results\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieFilters, {\n      children: /*#__PURE__*/_jsxDEV(SearchFilters, {\n        genres: genreOptions,\n        ratings: ratingOptions,\n        languages: languageOptions,\n        searchMovies: (keyword, year) => this.searchMovies(keyword, year)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieResults, {\n      children: /*#__PURE__*/_jsxDEV(MovieList, {\n        movies: results || [],\n        genres: genreOptions || []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Discover, \"Owno3pK++Xt8kumY1bXDzroJv1I=\");\n\n_c = Discover;\nexport default Discover;\nconst DiscoverWrapper = styled.main`\n  padding: 35px;\n`;\n_c2 = DiscoverWrapper;\nconst MovieResults = styled.div`\n  display: inline-block;\n  width: calc(100% - 295px);\n`;\n_c3 = MovieResults;\nconst MovieFilters = styled.div`\n  width: 280px;\n  float: right;\n  margin-top: 15px;\n`;\n_c4 = MovieFilters;\nconst MobilePageTitle = styled.h1`\n  display: none;\n`;\n_c5 = MobilePageTitle;\nconst TotalCount = styled.strong`\n  display: block;\n`;\n_c6 = TotalCount;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Discover\");\n$RefreshReg$(_c2, \"DiscoverWrapper\");\n$RefreshReg$(_c3, \"MovieResults\");\n$RefreshReg$(_c4, \"MovieFilters\");\n$RefreshReg$(_c5, \"MobilePageTitle\");\n$RefreshReg$(_c6, \"TotalCount\");","map":{"version":3,"sources":["/Users/essa/WebstormProjects/movieapp/src/pages/discover/index.js"],"names":["React","styled","colors","getPopularMovies","SearchFilters","MovieList","ratings","id","name","languages","Discover","keyword","setKeyword","useState","year","setYear","results","setResults","totalCount","setTotalCount","genreOptions","setGenreOptions","ratingOptions","setRatingOptions","languageOptions","setLanguageOptions","useEffect","initialFetch","searchMovies","DiscoverWrapper","main","MovieResults","div","MovieFilters","MobilePageTitle","h1","TotalCount","strong"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nimport * as colors from \"../../colors\";\r\n\r\nimport { getPopularMovies } from \"../../fetcher\";\r\n\r\nimport SearchFilters from \"../../components/searchfilter\";\r\nimport MovieList from \"../../components/movielist\";\r\n\r\nconst ratings = [\r\n    { id: 7.5, name: 7.5 },\r\n    { id: 8, name: 8 },\r\n    { id: 8.5, name: 8.5 },\r\n    { id: 9, name: 9 },\r\n    { id: 9.5, name: 9.5 },\r\n    { id: 10, name: 10 }]\r\n\r\nconst languages =  [\r\n    { id: 'GR', name: 'Greek' },\r\n    { id: 'EN', name: 'English' },\r\n    { id: 'RU', name: 'Russian' },\r\n    { id: 'PO', name: 'Polish' }\r\n]\r\n\r\nconst Discover = () => {\r\n  const [keyword, setKeyword] = useState('');\r\n  const [year, setYear] = useState(0);\r\n  const [results, setResults] = useState([]);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [genreOptions, setGenreOptions] = useState([]);\r\n  const [ratingOptions, setRatingOptions] = useState(ratings);\r\n  const [languageOptions, setLanguageOptions] = useState(languages);\r\n\r\n  useEffect(() => {\r\n    const initialFetch = async () => {\r\n      const results = await getPopularMovies()\r\n      setResults(results)\r\n    }\r\n    initialFetch()\r\n  }, [])\r\n\r\n  // TODO: Preload and set the popular movies and movie genres when page loads\r\n\r\n  // TODO: Update search results based on the keyword and year inputs\r\n\r\n\r\n  return (\r\n    <DiscoverWrapper>\r\n      <MobilePageTitle>Discover</MobilePageTitle> {/* MobilePageTitle should become visible on mobile devices via CSS media queries*/}\r\n      <TotalCount>{totalCount} results</TotalCount>\r\n      <MovieFilters>\r\n        <SearchFilters\r\n          genres={genreOptions}\r\n          ratings={ratingOptions}\r\n          languages={languageOptions}\r\n          searchMovies={(keyword, year) => this.searchMovies(keyword, year)}\r\n        />\r\n      </MovieFilters>\r\n      <MovieResults>\r\n        <MovieList\r\n          movies={results || []}\r\n          genres={genreOptions || []}\r\n        />\r\n      </MovieResults>\r\n    </DiscoverWrapper>\r\n  )\r\n}\r\n\r\nexport default Discover;\r\n\r\nconst DiscoverWrapper = styled.main`\r\n  padding: 35px;\r\n`\r\n\r\nconst MovieResults = styled.div`\r\n  display: inline-block;\r\n  width: calc(100% - 295px);\r\n`\r\n\r\nconst MovieFilters = styled.div`\r\n  width: 280px;\r\n  float: right;\r\n  margin-top: 15px;\r\n`\r\n\r\nconst MobilePageTitle = styled.h1`\r\n  display: none;\r\n`\r\n\r\nconst TotalCount = styled.strong`\r\n  display: block;\r\n`\r\n"]},"metadata":{},"sourceType":"module"}